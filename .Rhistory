z[1]=rnorm(1,0,1/sqrt(1.5^2)^0.5)
z
for(i in 1:99){z[i+1]=phi*z[i]+rnorm(1,0,1)}
z
z=ts(z)
ts.plot(z)
acf(z)
pacf(z)
phi=-0.5
n=100
z=rep(0,100)
z[1]=rnorm(1,0,1/sqrt(phi^2)^0.5)
for(i in 1:99){z[i+1]=phi*z[i]+rnorm(1,0,1)}
###############plot
z=ts(z)
ts.plot(z)
#####autocorrelation funtion
acf(z)
pacf(z)
phi=0.9
n=100
z=rep(0,100)
z[1]=rnorm(1,0,1/sqrt(phi^2)^0.5)
for(i in 1:99){z[i+1]=phi*z[i]+rnorm(1,0,1)}
###############plot
z=ts(z)
ts.plot(z)
#####autocorrelation funtion
acf(z)
pacf(z)
###################change phi to 0.9
phi=0.5
n=100
z=rep(0,100)
z[1]=rnorm(1,0,1/sqrt(1.5^2)^0.5)
for(i in 1:99){z[i+1]=phi*z[i]+rnorm(1,0,1)}
###############plot
z=ts(z)
ts.plot(z)
#####autocorrelation funtion
acf(z)
pacf(z)
###################change phi to 0.9
phi=0.9
n=100
z=rep(0,100)
z[1]=rnorm(1,0,1/sqrt(1.5^2)^0.5)
for(i in 1:99){z[i+1]=phi*z[i]+rnorm(1,0,1)}
###############plot
z=ts(z)
ts.plot(z)
#####autocorrelation funtion
acf(z)
pacf(z)
###################change phi to 0.9
phi=0.9
n=100
z=rep(0,100)
z[1]=rnorm(1,0,1/sqrt(phi^2)^0.5)
for(i in 1:99){z[i+1]=phi*z[i]+rnorm(1,0,1)}
###############plot
z=ts(z)
ts.plot(z)
#####autocorrelation funtion
acf(z)
pacf(z)
###################change phi to 0.9
phi=0.9
n=100
z=rep(0,100)
z[1]=rnorm(1,0,1/sqrt(phi^2)^0.5)
for(i in 1:99){z[i+1]=phi*z[i]+rnorm(1,0,1)}
###############plot
z=ts(z)
ts.plot(z)
#####autocorrelation funtion
acf(z)
pacf(z)
phi=-0.9
n=100
z=rep(0,100)
z[1]=rnorm(1,0,1/sqrt(phi^2)^0.5)
for(i in 1:99){z[i+1]=phi*z[i]+rnorm(1,0,1)}
###############plot
z=ts(z)
ts.plot(z)
phis=seq(-1,1,by=1)
phis
phis=seq(-1,1,by=0.1)
phis
phis=seq(-0.9,0.9,by=0.1)
phis
phis=seq(-0.9,0.9,by=0.01)
phis=seq(-0.9,0.9,by=0.05)
seq(1,99,length.out=11)
seq(1,99,length.out=99)
seq(99,1,length.out=99)
phis=seq(-0.9,0.9,by=0.09)
phis=seq(-0.9,0.9,by=0.01)
phis=seq(-0.9,0.9,by=0.05)
phis=seq(-0.9,0.9,by=0.005)
phis=seq(-0.9,0.9,by=0.1)
phis=seq(-0.9,0.9,by=0.18)
phis=seq(-0.9,0.9,by=0.018)
data()
library('datasets')
ar=(Nile,10)
nd.ar=(Nile,10)
n=Nile
nd.ar=(n,10)
Nd.ar=(n,10)
Nd.ar=ar(n,10)
n=Nile
nd.ar=ar(n,10)
nd.ar
nd.ar$arc
nd.ar
nd.ar$aic
nd.arimma=arima(n,order=c(1,0,1))
nd.arima
nd.arima=arima(n,order=c(1,0,1));nd.arima
nd.arima1=arima(n,order=c(1,1,1));nd.arima1
nd.arima2=arima(log(n),order=c(1,1,1));nd.arima2
library('astsa')
A=arima(jj,order=c(1,0,1),seasonal=list(order=c(0,1,0),period=4))
A=arima(jj,order=c(1,0,0),seasonal=list(order=c(0,1,0),period=4))
ts.diag(A)
plot(A)
ts.diag(jj)
ts.diag(A)
A=ts(A)
ts.diag(A)
tsdiag(A)
A=arima(jj,order=c(1,0,0),seasonal=list(order=c(0,1,0),period=4))
tsdiag(A)
A=arima(jj,order=c(1,1,0),seasonal=list(order=c(1,1,0),period=4))
tsdiag(A)
jj=data.frame(jj)
A=arima(jj,order=c(1,1,0),seasonal=list(order=c(1,1,0),period=4))
tsdiag(A)
A
######regression
D=seq(1,84,2)/4
D1=D^2
kk=arima(log(jj),order=c(2,0,0),seasonal=list(order=c(1,0,1),period=4)xreg=cbind(D,D1))
kk
kk=arima(log(jj),order=c(2,0,0),seasonal=list(order=c(1,0,1),period=4),xreg=cbind(D,D1))
kk
D=seq(1,84,1)/4
D1=D^2
kk=arima(log(jj),order=c(2,0,0),seasonal=list(order=c(1,0,1),period=4),xreg=cbind(D,D1))
kk
tsdoag(KK)
tsdiag(kk)
plot(jj)
tsdiag(kk)
kk
kk2=arima(log(jj),order=c(2,0,0),seasonal=list(order=c(0,0,1),period=4),xreg=cbind(D,D1))
kk2
kk3=arima(log(jj),order=c(1,0,0),seasonal=list(order=c(0,0,1),period=4),xreg=cbind(D,D1))
kk3
kk4=arima(log(jj),order=c(1,0,0),seasonal=list(order=c(0,1,1),period=4),xreg=cbind(D,D1))
kk4
kk5=arima(log(jj),order=c(1,0,0),seasonal=list(order=c(0,0,1),period=4),xreg=(D))
kk5
kk5=arima(log(jj),order=c(1,0,0),seasonal=list(order=c(0,1,1),period=4),xreg=(D))
kk5
kk5
plot(jj)
tsdiag(kk)
kk
kk5
kk4
kk6=arima(log(jj),order=c(2,0,0),seasonal=list(order=c(1,0,1),period=4),xreg=(D))
kk6
jj
library('astsa')
jj
matrix(jj)
matrix(jj,23,4)
matrix(jj,84,4)
jj
matrix(t(jj),84,4)
matrix(jj,84,4,byrow=T)
matrix(jj,21,4,byrow=T)
w=matrix(jj,21,4,byrow=T)
boxplot(w)
boxplot(log(w))
w=matrix(jj,21,4,byrow=T)
boxplot(t(w))
boxplot(log(t(w)))
#######################
w1=princomp(w)
summary(w1)
var(w)
w1$loadings
w1$scores
plot(1:21,w1scores[,1])
plot(1:21,w1$scores[,1])
w2=princomp(w,cor=T)
summary(w2)
plot(w2)
biplot(w2)
data(Nile)
data()
library("datasets", lib.loc="C:/Program Files/R/R-3.1.2/library")
Nile
x=matrix(c(1,0.2,0.2,1),2,2)
#decompose the matrix
w=svd(x)
w
######################3Using the iris data
library('datasets')
names(iris)
w=princomp(iris[,1:4],cor=T)
pairs(w$scores[,1:4])
x1=matrix(rnorm(150),4,4)
x1=matrix(rnorm(150),150,4)
x1
xx1=princomp(x1,cor=T)
xx1
biplot(xx1)
summary(xx1)
x1[,2]=x1[,2]+0.3*x1[,1]
x1[,3]=x1[,3]+0.3*x1[,2]
xx2=princomp(x1)
summary(xx2)
biplot(xx2)
x1=matrix(rnorm(600),150,4)
xx1=princomp(x1,cor=T)
biplot(xx1)
#####change the correlations
x1[,2]=x1[,2]+0.3*x1[,1]
x1[,3]=x1[,3]+0.3*x1[,2]
xx2=princomp(x1)
summary(xx2)
biplot(xx2)
rt(10)
rgamma(10)
rgamma(10,shape=2)
rbinom(10)
rbinom(10,2)
rbinom(10,2,0.1)
rbinom(10,3,0.1)
rbinom(10,1,0.1)
rbinom(10,1,0.3)
rpois(10)
rpois(10,2)
rexp(10)
m=matrix(0,100,4)
m[,1]=rgamma(400,shape=2)
m[,2]=rbinom(400,1,0.44)
m[,3]=rpois(400,2)
m[,4]=rexp(400)
m[,1]=rgamma(100,shape=2)
m[,2]=rbinom(100,1,0.44)
m[,3]=rpois(100,2)
m[,4]=rexp(100)
m
mp=princomp(m)
summary(mp)
biplot(mp)
mp
setwd("C:/Users/kidi wa logha/Dropbox/enviromental statistics/kisumu")
library('plyr')
#set working directory
setwd("C:/Users/kidi wa logha/Dropbox/enviromental statistics/kisumu")
#load the data
kisumu=read.csv('kisumu.csv',header=T,sep=',')
View(kisumu)
kisumu=read.table('kisumu.csv',header=T,sep=',')
View(kisumu)
View(kisumu)
dim(kisumu)
matrix(kisumu,4,1)
matrix(kisumu,1,4)
kisumu
matrix(kisumu,1,4,byrow=T)
as.matrix(kisumu)
as.matrix(kisumu,800,1)
as.matrix(kisumu[,1:12],800,1)
as.matrix(kisumu[1:50,],800,1)
reshape(kisumu,800,)
reshape(kisumu,800,1)
reshape(kisumu,800,1,direction='long')
stack(kisumu)
kisumu$Season=NULL;Kisumu$X=NULL;Kisumu$Type=NULL
kisumu$Season=NULL;kisumu$X=NULL;kisumu$Type=NULL
stack(kisumu)
View(kisumu)
kisumu$Year
kisumu$Year=NULL
stack(kisumu)
kis_tack=stack(kisumu)
View(kis_tack)
names(kis_tack)=c('Rainfall','Month')
View(kis_tack)
attach(kis_stack)
attach(kis_tack)
View(kis_tack)
kis_decompose(rainfall,type='mult')
kis_decomp=decompose(rainfall,type='mult')
rain=Rainfall
kis_decomp=decompose(rain,type='mult')
kis_decomp=decompose(rain)
rain=ts(Rainfall)
rain
kis_decomp=decompose(rain)
decompose(kisumu)
rain=ts(Rainfall,start=c(1961,1),frequency=12)
rain
View(kisumu)
kis_tack=stack(t(kisumu))
View(kis_tack)
View(kisumu)
t(rain)
rain
matrix(rain,50,12)
##Time Series Analysis of Kisumu Rainfall Data
library('plyr')
#set working directory
setwd("C:/Users/kidi wa logha/Dropbox/enviromental statistics/kisumu")
#load the data
kisumu=read.table('kisumu.csv',header=T,sep=',')
#inhouse cleaning
kisumu$Season=NULL;kisumu$X=NULL;kisumu$Type=NULL;kisumu$Year=NULL
################################stack the data
kis_tack=stack(t(kisumu))
names(kis_tack)=c('Rainfall','Month')
##TIme series analysis
attach(kis_tack)
#smoothing the data
rain_=ts(Rainfall,start=c(1961,1),frequency=12)
rain=matrix(rain_,50,12)
library('plyr')
#set working directory
setwd("C:/Users/kidi wa logha/Dropbox/enviromental statistics/kisumu")
#load the data
kisumu=read.table('kisumu.csv',header=T,sep=',')
#inhouse cleaning
kisumu$Season=NULL;kisumu$X=NULL;kisumu$Type=NULL;kisumu$Year=NULL
################################stack the data
kis_tack=stack(kisumu)
names(kis_tack)=c('Rainfall','Month')
##TIme series analysis
attach(kis_tack)
#smoothing the data
rain_=ts(Rainfall,start=c(1961,1),frequency=12)
rain=matrix(rain_,50,12)
rain
plot(rain)
plot(rain_)
rain=ts(rain2,start=c(1961,1),frequency=12)
rain2=matrix(rain_,50,12)
rain=ts(rain2,start=c(1961,1),frequency=12)
rain
plot(rain)
##Time Series Analysis of Kisumu Rainfall Data
library('plyr')
#set working directory
setwd("C:/Users/kidi wa logha/Dropbox/enviromental statistics/kisumu")
#load the data
kisumu=read.table('kisumu.csv',header=T,sep=',')
#inhouse cleaning
kisumu$Season=NULL;kisumu$X=NULL;kisumu$Type=NULL;kisumu$Year=NULL
################################stack the data
kis_tack=stack(kisumu)
names(kis_tack)=c('Rainfall','Month')
##TIme series analysis
attach(kis_tack)
#smoothing the data
rain=ts(Rainfall,start=c(1961,1),frequency=12)
kis_decomp=decompose(rain)
kis_decomp
plot(kis_decomp)
trend=kis_decomp$trend
seasonal=kis_decomp$seasonal
ts.plot(cbind(trend,trend*seasonal),lty=1:2)
tren
trend
dim(trand)
dim(trend)
length(trend)
trend[7:594]
ts.plot(cbind(trend[7:594],trend[7:594]*seasonal[7:594]),lty=1:2)
plot(ts(kis_decomp$random[7:594]))
acf(kis_decomp$random[7:594])
sd(rain[7:594])
sd(rain[7:594])-kis_decomp$trend[7:594]
sd(kis_decomp$random[7:594])#
arima(rain,order=c(1,0,0),seasonal=list(order=c(1,1,0),period=12))
arima(rain,order=c(2,0,0),seasonal=list(order=c(1,1,0),period=4))
arima(rain,order=c(2,0,0),seasonal=list(order=c(1,0,0),period=4))
arima(rain,order=c(1,0,0),seasonal=list(order=c(1,0,0),period=4))
arima(log(rain),order=c(1,0,0),seasonal=list(order=c(1,0,0),period=4))
arima(rain,order=c(1,0,0),seasonal=list(order=c(1,0,0),period=12))
arima(rain,order=c(1,0,0),seasonal=list(order=c(0,1,0),period=12))
arima(rain[7:594],order=c(1,0,0))
##Time Series Analysis of Kisumu Rainfall Data
library('plyr')
#set working directory
setwd("C:/Users/kidi wa logha/Dropbox/enviromental statistics/kisumu")
#load the data
kisumu=read.table('kisumu.csv',header=T,sep=',')
#inhouse cleaning
kisumu$Season=NULL;kisumu$X=NULL;kisumu$Type=NULL;kisumu$Year=NULL
################################stack the data
kis_tack=stack(kisumu)
names(kis_tack)=c('Rainfall','Month')
##TIme series analysis
attach(kis_tack)
#smoothing the data
rain=ts(Rainfall,start=c(1961,1),frequency=12)
#rain=matrix(rain,50,12)
kis_decomp=decompose(rain)
############################
plot(kis_decomp)
########
trend=kis_decomp$trend
seasonal=kis_decomp$seasonal
ts.plot(cbind(trend[7:594],trend[7:594]*seasonal[7:594]),lty=1:2)
#from the above two plots, I have identified trend and seasonal effects
#and i have to deseasonalize the data and remov the trend
#Detection of the autocorrelation
plot(ts(kis_decomp$random[7:594]))
acf(kis_decomp$random[7:594])
#standard deviation
sd(rain[7:594])#77.89395
#########################
sd(rain[7:594])-kis_decomp$trend[7:594]#standard deviation of the series after
#subtracting the the trend estimate
sd(kis_decomp$random[7:594])#standard deviaton after seasonal adjustment#60.76554
#reduction in standard deviation shows that the seasonal adjustment has been very
#effective
#########################################
arima(rain[7:594],order=c(1,0,0))
arima(log(rain[7:594]),order=c(1,0,0))
arima(sqrt(rain[7:594]),order=c(1,0,0))
arima(log(rain[7:594],na.rm=T),order=c(1,0,0))
arima(log(rain[7:594]),order=c(1,0,0))
log(rain)
log(rain[7:594])
arima(log(rain[7:594]),order=c(1,0,0))
sqrt(rain)
plot(kis_decomp)
plot(log(kis_decomp))
plot(sqrt(kis_decomp))
kis_decomp=decompose(sqrt(rain))
plot(sqrt(kis_decomp))
plot(kis_decomp)
kis_decomp=decompose(log(rain))
plot(kis_decomp)
kis_decomp=decompose(sqrt(rain))
plot(kis_decomp)
trend=kis_decomp$trend
seasonal=kis_decomp$seasonal
ts.plot(cbind(trend[7:594],trend[7:594]*seasonal[7:594]),lty=1:2)
plot(ts(kis_decomp$random[7:594]))
acf(kis_decomp$random[7:594])
sd(rain[7:594])#77.89395
#########################
sd(rain[7:594])-kis_decomp$trend[7:594]#
sd(kis_decomp$random[7:594])#s
arima(sqrt(rain[7:594]),order=c(1,0,0))
arima(sqrt[7:594],order=c(1,0,0),seasonal=list(order=c(1,0,0),period=12))
arima(sqrt(rain)[7:594],order=c(1,0,0),seasonal=list(order=c(1,0,0),period=12))
arima(sqrt(rain)[7:594],order=c(1,0,0),seasonal=list(order=c(1,1,0),period=12))
arima(sqrt(rain)[7:594],order=c(1,0,0),seasonal=list(order=c(0,1,0),period=12))
##Time Series Analysis of Kisumu Rainfall Data
library('plyr')
#set working directory
setwd("C:/Users/kidi wa logha/Dropbox/enviromental statistics/kisumu")
#load the data
kisumu=read.table('kisumu.csv',header=T,sep=',')
#inhouse cleaning
kisumu$Season=NULL;kisumu$X=NULL;kisumu$Type=NULL;kisumu$Year=NULL
################################stack the data
kis_tack=stack(kisumu)
names(kis_tack)=c('Rainfall','Month')
##TIme series analysis
attach(kis_tack)
#smoothing the data
rain=ts(Rainfall,start=c(1961,1),frequency=12)
#rain=matrix(rain,50,12)
kis_decomp=decompose(sqrt(rain))
############################
plot(kis_decomp)
########
trend=kis_decomp$trend
seasonal=kis_decomp$seasonal
ts.plot(cbind(trend[7:594],trend[7:594]*seasonal[7:594]),lty=1:2)
#from the above two plots, I have identified trend and seasonal effects
#and i have to deseasonalize the data and remov the trend
#Detection of the autocorrelation
plot(ts(kis_decomp$random[7:594]))
acf(kis_decomp$random[7:594])
#standard deviation
sd(rain[7:594])#77.89395
#########################
sd(rain[7:594])-kis_decomp$trend[7:594]#standard deviation of the series after
#subtracting the the trend estimate
sd(kis_decomp$random[7:594])#standard deviaton after seasonal adjustment#2.811256
#reduction in standard deviation shows that the seasonal adjustment has been very
#effective
############################################################
#ARIMA
arima(sqrt(rain)[7:594],order=c(1,0,0),seasonal=list(order=c(1,0,0),period=12))
####order 2
arima(rain[7:594],order=c(2,0,0),seasonal=list(order=c(1,1,0),period=4))
##log transformation
arima(log(jj),order=c(1,0,0),seasonal=list(order=c(1,1,0),period=4))
arima(log(jj),order=c(2,0,0),seasonal=list(order=c(1,1,0),period=4))
